scalar Datetime
scalar Image

type User {
  id: ID!
  public_id: ID!
  first_name: String!
  last_name: String!
  username: String!
  email: String!
}

type Profile {
  id: ID!
  public_id: ID!
  user: User!
  image: Image!
  created_at: Datetime!
  updated_at: Datetime!
}

type Category {
  id: ID!
  public_id: String!
  category_name: String!
  category_description: String!
}

type Account {
  id: ID!
  public_id: String!
  account_name: String!
  account_type: String!
  owner: Profile!
  currency_code: String!
  account_balance: Float!
  created_at: Datetime!
  updated_at: String!
}

type Transaction {
  id: ID!
  public_id: String!
  transaction_type: String!
  transaction_amount: Float!
  currency_code: String!
  description: String!
  transaction_date: String!
  account: Account!
  created_at: Datetime!
  updated_at: String!
}

type TransactionCategory {
  id: ID!
  public_id: String!
  transaction: Transaction!
  category: Category!
}

type Budget {
  id: ID!
  public_id: String!
  budget_name: String!
  budget_description: String!
  budget_start_date: Datetime!
  budget_end_date: Datetime!
  budget_amount: Float!
  categories: Category!
  created_at: Datetime!
  updated_at: String!
}

type BudgetCategory {
  id: ID!
  public_id: String!
  budget: Budget!
  category: Category!
}

type Report {
  id: ID!
  public_id: String!
  report_name: String!
  report_description: String!
  accounts: Account!
  transactions: [Transaction]!
  created_at: Datetime!
  updated_at: String!
}

type ReportCategory {
  id: ID!
  public_id: String!
  report: Report!
  category: Category!
}

type Query {
  getAllUsers: [User!]!
  getUserByPublicId(public_id: ID!): User!
  getUserByUsername(username: String!): User!

  getAllProfiles: [Profile!]!
  getProfileByPublicId(public_id: ID!): Profile!

  getAllAccounts: [Account!]!
  getAccountByPublicId(public_id: ID!): Account!

  getAllCategories: [Category!]!
  getCategoryByPublicId(public_id: ID!): Category!

  getAllBudgets: [Budget!]!
  getBudgetByPublicId(public_id: ID!): Budget!

  getAccountsByWorkspaceId(workspaceId: ID!): [Account!]!
  getTransactionsByAccountId(accountId: ID!): [Transaction!]!
  getCategoryById(id: ID!): Category
  getBudgetById(id: ID!): Budget
}

type Mutation {
  createUser(
    username: String!
    email: String!
    firstName: String
    lastName: String
  ): User
  updateUser(
    id: ID!
    username: String!
    email: String!
    firstName: String
    lastName: String
  ): User
  deleteUser(id: ID!): Boolean
  createProfile(userId: ID!): Profile
  updateProfile(id: ID!, userId: ID!): Profile
  deleteProfile(id: ID!): Boolean
  updateAccount(
    id: ID!
    accountName: String!
    accountType: String!
    currencyCode: String!
    accountBalance: Float!
  ): Account
  deleteAccount(id: ID!): Boolean
  createTransaction(
    transactionType: String!
    transactionAmount: Float!
    currencyCode: String!
    description: String!
    transactionDate: String!
    accountId: ID!
  ): Transaction
  updateTransaction(
    id: ID!
    transactionType: String!
    transactionAmount: Float!
    currencyCode: String!
    description: String!
    transactionDate: String!
  ): Transaction
  deleteTransaction(id: ID!): Boolean
  createCategory(categoryName: String!, categoryDescription: String!): Category
  updateCategory(
    id: ID!
    categoryName: String!
    categoryDescription: String!
  ): Category
  deleteCategory(id: ID!): Boolean
  createBudget(
    budgetName: String!
    budgetDescription: String!
    budgetStartDate: String!
    budgetEndDate: String!
    budgetAmount: Float!
  ): Budget
  updateBudget(
    id: ID!
    budgetName: String!
    budgetDescription: String!
    budgetStartDate: String!
    budgetEndDate: String!
    budgetAmount: Float!
  ): Budget
  deleteBudget(id: ID!): Boolean
  addCategoryToBudget(budgetId: ID!, categoryId: ID!): Budget
  removeCategoryFromBudget(budgetId: ID!, categoryId: ID!): Budget
}
